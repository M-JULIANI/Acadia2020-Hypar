// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace ProceduralMassGen
{
    public class ProceduralMassGenInputs: S3Args
    {
		/// <summary>
		/// Perimeter of the building site.
		/// </summary>
		[JsonProperty("Perimeter")]
		public Elements.Geometry.Polygon Perimeter {get;}

		/// <summary>
		/// Min height of the building from grade.
		/// </summary>
		[JsonProperty("MinBuildHeight")]
		public double MinBuildHeight {get;}

		/// <summary>
		/// Max height of the building from grade.
		/// </summary>
		[JsonProperty("MaxBuildHeight")]
		public double MaxBuildHeight {get;}

		/// <summary>
		/// Parameter which determines where the building starts growing.
		/// </summary>
		[JsonProperty("StartParam")]
		public double StartParam {get;}



        /// <summary>
        /// Construct a ProceduralMassGenInputs with default inputs.
        /// This should be used for testing only.
        /// </summary>
        public ProceduralMassGenInputs() : base()
        {
			this.Perimeter = Elements.Geometry.Polygon.Rectangle(1, 1);
			this.MinBuildHeight = 80;
			this.MaxBuildHeight = 120;
			this.StartParam = 1;

        }


        /// <summary>
        /// Construct a ProceduralMassGenInputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public ProceduralMassGenInputs(Elements.Geometry.Polygon perimeter, double minBuildHeight, double maxBuildHeight, double startParam, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey): base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
			this.Perimeter = perimeter;
			this.MinBuildHeight = minBuildHeight;
			this.MaxBuildHeight = maxBuildHeight;
			this.StartParam = startParam;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}